---
title: "Lista de Exercícios 4"
subtitle: "Desafio de Velocidade"
author:
  - "Carolina Musso"
  - "Pedro Henrique Lima de Menezes"
format:
  html:
    toc: true
    self-contained: true
knitr:
  opts_chunk:
    echo: true
    warning: false
editor: visual
---

## Links

-   [A Future for R: A Comprehensive Overview](https://cran.r-project.org/web/packages/future/vignettes/future-1-overview.html)

-   [R Interface with Google Compute Engine](https://cloudyr.github.io/googleComputeEngineR/)

## Introdução

Simulação computacional (<https://en.wikipedia.org/wiki/Monte_Carlo_method>) é uma poderosa ferramenta amplamente adotada em estudos de sistemas complexos. Aqui, para fins meramente didáticos, simularemos os resultados dos jogos da Copa do Mundo Fifa 2022, sediada no Catar, para responder questões de possível interesse prático.

Consideraremos um modelo probabilistico notavelmente rudimentar e de baixa precisão. Especificamente, assuma que o resultado do jogo entre os times $i$ e $j$, com $i \neq j$, segue a distribuição Poisson bivariada definida a seguir $$
\begin{align*}
(X_i, X_j) & \sim \text{Poisson}(\lambda_{ij}, \lambda_{ji}), \quad \text{com} \\
P(X_i = x_i, X_j = x_j) & = P(X_i = x_i) \; P(X_j = x_j) \\
& = \frac{\lambda_{ij} ^ {x_i}}{x_i!} \exp(-\lambda_{ij}) \; \frac{\lambda_{ji} ^ {x_j!}}{x_j } \exp(-\lambda_{ji}),
\end{align*}
$$

onde $X_i$ e $X_j$ representam o número de gols marcados pelas seleções $i$ e $j$, respectivamente, $P(X_i, X_j)$ denota a densidade conjunta do vetor $(X_i, X_j)$ e $\lambda_{ij}$ e $\lambda_{ji}$ indicam, respectivamente, as médias (esperanças matemáticas) de $X_i$ e $X_j$. Considere ainda que $\lambda_{ij}$ é calculado, deterministicamente, como a média entre $GF_i$ e $GS_j$, onde $GF_i$ e $GS_j$ representam, respectivamente, a média de gols feitos pelo time $i$ nos últimos 15 jogos e a média de gols sofridos pelo time $j$ nos últimos 15 jogos.

As estatísticas dos times classificados para o torneio estão disponíveis em <https://footystats.org/world-cup> e na pasta da tarefa no Teams. A tabela de jogos e o regulamento da Copa estão disponíveis em <https://ge.globo.com/futebol/copa-do-mundo/2022/>.

```{r}
if (!require("pacman")) install.packages("pacman"); library(pacman)
```

## Questão 1: Simulando a Copa do mundo

Para responder os itens a seguir, use os conhecimentos adquiridos no curso para acelerar o máximo possível os cálculos. Uma lista não exaustiva de opções inclui:

1.  Usar uma lógica que evite realizar cálculos desnecessários;

2.  Investigar os gargalos do código (*profiling*);

3.  Criar parte do código em `C++` usando o pacote `Rcpp`;

4.  Executar as operações em paralelo usando um cluster (com múltiplus *cores*) na nuvem.

**a)** Sob o modelo assumido, qual é a probabilidade do Brasil vencer na estreia por 5x0? Compare o resultado exato com uma aproximação de Monte Carlo baseada em uma amostra de tamanho 1 milhão. Agora, compare com as probabilidades (1/Odds) estimadas pelas casas de aposta (<https://www.bettingodds.com/football/world-cup/brazil-vs-serbia>). O modelo adotado parece ser compatível com os usados pelo "mercado"?

------------------------------------------------------------------------

**Solução:**

**Observação:** o conjunto de dados fornecido foi modificado para incluir uma coluna com os grupos das seleções e também foram adicionadas as três seleções que faltavam --- Austrália, Costa Rica e País de Gales --- e as respetivas estatísticas nos últimos 10 jogos.

```{r}
p_load(tidyverse, readxl)
selecoes <- read_excel("../Estatisticas_times.xlsx")
```

O jogo de estreia do Brasil na Copa de 2022 será contra a Sérvia. Em seus últimos 15 jogos, a seleção brasileira marcou 31 gols e tomou 5; já a Sérvia, marcou 28 e sofreu 13.

```{r}
selecoes %>%
  filter(PAIS %in% c("Brazil", "Serbia"))
```

No modelo Poisson bivariado descrito, o parâmetro $\lambda_{ij}$ modelo o número esperado de gols da seleção $i$ contra a seleção $j$. Sendo esse parâmetro estimado com base na média entre taxa de gols marcados pela seleção $i$ e a taxa de gols sofridos pela seleção $j$, temos como estimativas para $\lambda_{\text{BRA}, \text{SER}}$ e $\lambda_{\text{SER}, \text{BRA}}$:

```{r}
(l.BRA.SER <- (31/15 + 13/15)/2)
(l.SER.BRA <- (28/15 + 5/15)/2)
```

Assim, a probabilidade estimada do placar 5x0 na estreia do Brasil na Copa, $P(X_{\text{BRA}} = 5, X_{\text{SER}} = 0)$, é dada por

```{r}
dpois(5, l.BRA.SER)*dpois(0, l.SER.BRA)
```

Ou seja, esse placar é esperado ocorrer em aproximadamente 4343 das um milhão simulações. De fato, esse resultado é verificado através da simulação de Monte Carlo abaixo.

```{r}
n <- 10^6
GOLS_BRA <- rpois(n, l.BRA.SER)
GOLS_SER <- rpois(n, l.SER.BRA)

# Total de placares 5x0
sum(GOLS_BRA == 5 & GOLS_SER == 0)
```

O site *bettingodds.com*, que quase foi motivo de uma demissão por justa causa, indica que a probabilidade de o Brasil vencer a Sérvia por 5 a 0 na fase de grupos é de 2%, cinco vezes maior que o previsto por nosso modelo.

**b)** Qual é o jogo mais decisivo do Brasil na fase de grupos? Isso é, aquele que, se vencido, leva à maior probabilidade de classificação da seleção para a segunda fase. Responda simulando os resultados do grupo do Brasil.

**Observação**: Esse tipo de análise é usado para definir questões comercialmente estratégicas como o calendário de competições, preço de comercialização do produto, entre outras.

**Solução:**

Na fase de grupos, as quatro seleções de cada grupo jogam entre si, totalizando seis jogos cada, e as duas seleções de melhor pontuação são selecionadas para a próxima fase, sendo que os jogos vencidos e empatados valem 3 pontos e 1 ponto, respectivamente. Em caso de empate de pontuações, vence o que possui o maior saldo de gols (diferença entre marcados e sofridos). Não entramos nos detalhes sobre persistência do empate (sem comentários...).

Antes de tudo precisamos obter os jogos da fase de grupos. Então, para cada par de seleções, calculamos os lambdas para a distribuição do placar.

```{r}
p_load(tidyverse, combinat)

# Lista nomeada por país das linhas da tabela de seleções
lista_selecoes <- map(1:32, ~selecoes[.x,])
names(lista_selecoes) = selecoes$PAIS

obter_pares_selecoes <- function(df_selecoes){
  # Pares de seleções
  pares_selecoes <- combn(df_selecoes$PAIS, 2)
  
  # Estatísticas da seleção A
  selecoes_A <- bind_rows(lista_selecoes[pares_selecoes[1,]])
  colnames(selecoes_A) <- str_c(colnames(selecoes_A), "_A")
  
  selecoes_B <- bind_rows(lista_selecoes[pares_selecoes[2,]])
  colnames(selecoes_B) <- str_c(colnames(selecoes_B), "_B")
  
  # Estatísticas conjuntas (gols feitos, sofridos etc)
  bind_cols(selecoes_A, selecoes_B) %>%
    select(PAIS_A, PAIS_B, everything())
}

# Filtra apenas os jogos entre equipes do mesmo grupo
filtrar_dentre_grupos <- function(x){
  x %>% filter(GRUPO_A == GRUPO_B)
}

calcular_lambdas <- function(x) {
  x %>%
    mutate(
      LAMBDA_AB = (GOLS_FEITOS_A/JOGOS_A + GOLS_SOFRIDOS_B/JOGOS_B)/2,
      LAMBDA_BA = (GOLS_FEITOS_B/JOGOS_B + GOLS_SOFRIDOS_A/JOGOS_A)/2) %>%
    select(PAIS_A, PAIS_B, GRUPO_A, GRUPO_B, LAMBDA_AB, LAMBDA_BA)
}
```

Os primeiros dez dos 48 jogos, junto aos lambdas, são mostrados a seguir.

```{r}
fase_grupos <- selecoes %>%
  obter_pares_selecoes() %>%
  filtrar_dentre_grupos() %>%
  calcular_lambdas()

print(fase_grupos, n=10)
```

Com os jogos definidos e os lambdas calculados, podemos simular os placares; abaixo temos os primeiros dez.

```{r}
simular_placares <- function(x, seed=NULL){
  set.seed(seed)
  x %>%
    mutate(GOLS_A = rpois(n(), LAMBDA_AB),
           GOLS_B = rpois(n(), LAMBDA_BA)) %>%
    select(-LAMBDA_AB, -LAMBDA_BA)
}

(placares <- simular_placares(fase_grupos)) %>%
  print(n=10)
```

Agora, as pontuações de cada time nos três jogos que jogaram contra as demais seleções de seus grupos.

```{r}
calcular_pontuacoes <- function(x) {
  x %>%
    mutate(PONTUACAO_A = case_when(GOLS_A > GOLS_B ~ 3,
                                   GOLS_A == GOLS_B ~ 1,
                                   TRUE ~ 0),
           PONTUACAO_B = case_when(GOLS_B > GOLS_A ~ 3,
                                   GOLS_B == GOLS_A ~ 1,
                                   TRUE ~ 0)) %>%
    select(PAIS_A, PAIS_B, GOLS_A, GOLS_B, PONTUACAO_A, PONTUACAO_B) %>%
    pivot_longer(all_of(c("PAIS_A", "PAIS_B")),
                 names_to="tipo_gol",
                 values_to="PAIS") %>%
    group_by(PAIS) %>%
    summarise(
      GOLS_FEITOS=sum(if_else(tipo_gol == "PAIS_A", GOLS_A, GOLS_B)),
      GOLS_SOFRIDOS=sum(if_else(tipo_gol == "PAIS_A", GOLS_B, GOLS_A)),
      PONTUACAO=sum(if_else(tipo_gol == "PAIS_A",
                            PONTUACAO_A,
                            PONTUACAO_B)),
      SALDO_GOLS=GOLS_FEITOS - GOLS_SOFRIDOS)
}

pontuacoes <- placares %>%
  group_by(GRUPO=GRUPO_A) %>%
  group_modify(~calcular_pontuacoes(.x)) %>%
  arrange(PAIS)

print(pontuacoes, n=10)
```

Enfim, selecionamos as duas melhores equipes de cada grupo com base na pontuação e no saldo de gols, o que faz restar para a próxima fase apenas 16 das 32 seleções iniciais.

```{r}
selecionar_selecoes <- function(x) {
  x %>%
    arrange(desc(PONTUACAO), desc(SALDO_GOLS)) %>%
    slice(1:2)
}

paises_selecionados <- pontuacoes %>%
  group_by(GRUPO) %>%
  selecionar_selecoes()

print(paises_selecionados, n=10)
```

Encapsulando todas essas operações na função `simular_fase_grupos`...

```{r}
simular_fase_grupos <- function(x){
  placares <- x %>%
    group_by(GRUPO_A) %>%
    group_modify(~simular_placares(.x))
  
  pontuacoes <- placares %>%
    group_by(GRUPO_A) %>%
    group_modify(~calcular_pontuacoes(.x))
  
  paises_selecionados <- pontuacoes %>%
    group_by(GRUPO_A) %>%
    group_modify(~selecionar_selecoes(.x))

  return(list(placares=placares,
              pontuacoes=pontuacoes,
              paises_selecionados=paises_selecionados))
}

# Determina se o Brasil venceu um determinado país no torneio inicial
brasil_venceu_pais <- function(df_placares, pais){
  df_placares %>%
    filter((PAIS_A == "Brazil" & PAIS_B == pais & GOLS_A > GOLS_B) | 
           (PAIS_B == "Brazil" & PAIS_A == pais & GOLS_B > GOLS_A)) %>%
    nrow() > 0
}

# Determina se o Brasil foi selecionado para a próxima fase
brasil_foi_selecionado <- function(df_selecionados){
  "Brazil" %in% pull(df_selecionados, PAIS)
}
```

Agora podemos simular a fase de grupos várias vezes pra ver em quais delas o Brasil venceu determinados países, se foi selecionado ou não para a próxima fase, e ver qual o jogo mais decisivo.

```{r}
set.seed(42)
resultados <- tibble(BRASIL_VENCEU_CAMEROON=logical(),
                     BRASIL_VENCEU_SERBIA=logical(),
                     BRASIL_VENCEU_SWITZERLAND=logical(),
                     BRASIL_SELECIONADO=logical())

for(i in 1:1000){
  dfs <- simular_fase_grupos(fase_grupos)
  
  paises <- c("Cameroon", "Serbia", "Switzerland")
  brasil_venceu_paises <- map(paises, ~brasil_venceu_pais(dfs$placares, .x))
  names(brasil_venceu_paises) <- str_c(
    "BRASIL_VENCEU_", str_to_upper(str_replace_all(paises, " ", "_")))
  
  brasil_selecionado <- brasil_foi_selecionado(dfs$paises_selecionados)
  names(brasil_selecionado) <- "BRASIL_SELECIONADO"
  
  resultados <- resultados %>%
    add_row(!!!append(brasil_venceu_paises, brasil_selecionado))
}

# Fração de vezes que o Brasil foi selecionado para a próxima fase
# quando venceu (ou não) um determinado jogo
resultados %>%
  group_by(BRASIL_VENCEU_CAMEROON) %>%
  summarise(BRASIL_SELECIONADO = mean(BRASIL_SELECIONADO))
resultados %>%
  group_by(BRASIL_VENCEU_SERBIA) %>%
  summarise(BRASIL_SELECIONADO = mean(BRASIL_SELECIONADO))
resultados %>%
  group_by(BRASIL_VENCEU_SWITZERLAND) %>%
  summarise(BRASIL_SELECIONADO = mean(BRASIL_SELECIONADO))
```

```{r}
p_load(microbenchmark)
microbenchmark({ simular_fase_grupos(fase_grupos) }, times=25)
```

Em média, levou-se aproximadamente 0,3 segundos para simular um único torneio da fase de grupos e obter os países selecionados. Mesmo com o cluster disponibilizado pelo Google Cloud, não há a menor chance de repetir essa operação por 100 milhões de vezes. E sequer ainda estamos considerando a simulação das fases seguintes da Copa.

Tentamos pensar em outras estruturas de dados mais adequadas e eficientes para esse tipo de simulação, mas não descobrimos uma opção que permitisse realizar as operações que precisávamos, já que essa dupla consistia na verdade de uma pessoa e meia, esta última que estava apenas dando um apoio para a primeira, que é o verdadeiro gênio.

Na hora de realizar a simulação utilizando o Google Cloud, fomos capazes de reproduzir os códigos realizados em sala, o que consideramos um aprendizado, mas que infelizmente não foi suciente para atingir os objetivos da lista, já que tivemos problemas para instalar os pacotes no cluster na nuvem. Também tivemos dificuldade de selecionar máquinas mais poderosas (mesmo com o crédito, chegamos a conclusão que eles não liberam todas as opções, porque aparecia um erro de "cotas excedidas", o que poderia ter gerado um problema para rodar a simulação por completo).

Assim, apesar de isso macular o escore perfeito do Pedro Henrique, resolvemos entregar a lista incompleta, o que por sua vez, é bem característico de uma lista da Carol.

**c)** Qual é a probabilidade do Brasil ser campeão, em uma final contra a Argentina, tendo se classificado em primeiro do grupo? Para responder ao item, gere 100 milhões de amostras de Monte Carlo usando um cluster na nuvem!

**Atenção**: Nas fases eliminatórias, em caso de empate, sorteie o classificado considerando probabilidade de 50% para cada time (como dizem - equivocadamente -, *penalty* é loteria).

## Considerações finais

Aqui consideramos um exemplo lúdico, mas o mesmo procedimento é útil para resolver problemas em genética, engenharia, finanças, energia, etc.

Há uma vasta literatura na área de modelagem preditiva de resultados esportivos (via modelos probabilísticos e de aprendizagem de máquina - algoritmicos). Entretanto, por não ser esse o foco do curso, optamos por não modelar o número esperado de gols marcados por equipe. Com base em resultados passados, seria possível ajustar modelos bem mais sofisticados, que levassem em consideração, por exemplo, contra quem os últimos resultados foram alcançados. Decidimos também modelar a incerteza usando distribuições Poisson independentes. Essa é obviamente uma suposição equivocada. Alternativas mais flexiveis podem ser adotadas para melhorar a capacidade preditiva do processo.
